import 'package:doeat/models/models.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';

part 'product_specification.g.dart';

/// {@template user}
/// ProductSpecification model
///
/// [ProductSpecification.empty] represents an empty product specification.
/// {@endtemplate}
///
@JsonSerializable()
class ProductSpecification extends Equatable {
  /// {@macro product specification}
  final String id;
  final String name;
  final String code;
  final List<Product> specification;

  const ProductSpecification({
    required this.id,
    this.imageUrl = '',
    this.name = '',
    this.distance = '',
    this.score = 0,
    this.ratingCount = 0,
    this.weeklyOrderCount = 0,
    this.category = const [''],
    this.location = const {},
    this.description = '',
    this.productList = const [Product(id: '', name: '', price: 0)],
  });

  /// Empty product specification
  static const empty = ProductSpecification(id: '');

  /// Convenience getter to determine whether the current product specification is empty.
  bool get isEmpty => this == ProductSpecification.empty;

  /// Convenience getter to determine whether the current product specification is not empty.
  bool get hasData => this != ProductSpecification.empty;

  /* Map<String, dynamic> toJson() {
    return {
      'id': id,
      'imageUrl': imageUrl,
      'name': name,
      'distance': distance,
      'score': score,
      'ratingCount': ratingCount,
      'weeklyOrderCount': weeklyOrderCount,
      'category': category,
      'location': location,
      'description': description,
    };
  }

  factory ProductSpecification.fromJson(Map<String, dynamic> json) {
    return ProductSpecification(
      id: json['id'] as String,
      imageUrl: json['imageUrl'] as String,
      name: json['name'] as String,
      distance: json['distance'] as String,
      score: json['score'] as num,
      ratingCount: json['ratingCount'] as num,
      weeklyOrderCount: json['weeklyOrderCount'] as num,
      category: json['category'] as List<String>,
      location: json['location'] as Map<String, dynamic>,
      description: json['description'] as String,
    );
  } */

  factory ProductSpecification.fromJson(Map<String, dynamic> json) {
    return _$ProductSpecificationFromJson(json);
  }

  Map<String, dynamic> toJson() => _$ProductSpecificationToJson(this);

  factory ProductSpecification.fromFirestore(DocumentSnapshot snapshot) {
    return ProductSpecification.fromJson(snapshot.data() as Map<String, dynamic>);
  }

  @override
  List<Object?> get props => [
        id,
        imageUrl,
        name,
        distance,
        score,
        ratingCount,
        weeklyOrderCount,
        category,
        description,
        productList,
      ];

  static List<ProductSpecification> generateProductSpecificationList() {
    return [
      const ProductSpecification(
          imageUrl: 'assets/images/food1.jpg',
          name: 'McDonald\'s',
          distance: 'MCDO',
          score: 4.9,
          ratingCount: 107.3,
          weeklyOrderCount: 2.7,
          category: ['Asian', 'Snacks', 'Pastry'],
          description: 'The best food to eat ...',
          id: ''),
      const ProductSpecification(
          imageUrl: 'assets/images/food4.jpg',
          name: 'McDonald\'s',
          distance: 'MCDO',
          score: 4.9,
          ratingCount: 107.3,
          weeklyOrderCount: 2.7,
          category: ['Asian', 'Snacks', 'Pastry'],
          description: 'The best food to eat ...',
          id: ''),
      const ProductSpecification(
          imageUrl: 'assets/images/food3.jpg',
          name: 'McDonald\'s',
          distance: 'MCDO',
          score: 4.9,
          ratingCount: 107.3,
          weeklyOrderCount: 2.7,
          category: ['Asian', 'Snacks', 'Pastry'],
          description: 'The best food to eat ...',
          id: ''),
      const ProductSpecification(
          imageUrl: 'assets/images/food2.jpg',
          name: 'McDonald\'s',
          distance: 'MCDO',
          score: 4.9,
          ratingCount: 107.3,
          weeklyOrderCount: 2.7,
          category: ['Asian', 'Snacks', 'Pastry'],
          description: 'The best food to eat ...',
          id: ''),
    ];
  }
}
